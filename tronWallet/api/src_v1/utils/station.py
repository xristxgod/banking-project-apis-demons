from typing import Union, Dict

from src_v1.utils.node import NodeTron
from src_v1.utils.types import TronAccountAddress, Amount
from config import decimals


async def get_energy(address: str, energy: int) -> int:
    """If the user has enough energy."""
    total_energy = (await tron_station.get_account_energy(address=address))["totalEnergy"]
    if int(total_energy) <= 0:
        return energy
    elif energy - int(total_energy) <= 0:
        return 0
    else:
        return energy - int(total_energy)


class TronStation(NodeTron):

    defaultTotalEnergyLimit = 50_000_000_000

    async def get_chain_parameters_by_name(self, name: str) -> int:
        parameters = await self.async_node.get_chain_parameters()
        for parameter in parameters:
            if parameter["key"] == name:
                return parameter["value"]
        else:
            return 0

    async def calculate_burn_energy(self, amount: Amount) -> Union[float, int]:
        """
        Returns the amount of energy generated by burning TRX
        :param amount: Amount of TRX in sun
        :return:
        """
        energy_fee = await self.get_chain_parameters_by_name(name="getEnergyFee")
        if float(energy_fee) == 0:
            return decimals.create_decimal(0)
        fee = (amount / energy_fee) * 1_000_000
        return decimals.create_decimal(fee)

    async def get_account_bandwidth(self, address: TronAccountAddress) -> Dict:
        """
        Returns bandwidth data from account.
        :param address: Address of account
        """
        account_resources = await self.async_node.get_account_resource(address)
        free_bandwidth = account_resources["freeNetLimit"] if "freeNetLimit" in account_resources else 0
        free_bandwidth_used = account_resources["freeNetUsed"] if "freeNetUsed" in account_resources else 0
        total_bandwidth = free_bandwidth - free_bandwidth_used
        return {
            "freeBandwidth": free_bandwidth,
            "freeBandwidthUsed": free_bandwidth_used,
            "totalBandwidth": total_bandwidth
        }

    async def get_account_energy(self, address: TronAccountAddress) -> Dict:
        """
        Returns energy data from account.
        :param address: Address of account
        """
        account_resources = await self.async_node.get_account_resource(address)
        energy = account_resources["EnergyLimit"] if "EnergyLimit" in account_resources else 0
        energy_used = account_resources["EnergyUsed"] if "EnergyUsed" in account_resources else 0
        total_energy = energy - energy_used if energy > 0 and energy_used > 0 else 0
        return {
            "energy": energy,
            "energyUsed": energy_used,
            "totalEnergy": total_energy
        }


tron_station = TronStation()
